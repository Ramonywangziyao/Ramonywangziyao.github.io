<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BLOG-THE BUSSY WANG CLUB</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ziyaowang.com/"/>
  <updated>2020-06-07T00:52:34.258Z</updated>
  <id>http://www.ziyaowang.com/</id>
  
  <author>
    <name>Ziyao Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>了解Spring Bean Scope这一篇文章就够了</title>
    <link href="http://www.ziyaowang.com/2020/06/06/%E4%BA%86%E8%A7%A3Spring-Bean-Scope%E8%BF%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
    <id>http://www.ziyaowang.com/2020/06/06/了解Spring-Bean-Scope这一篇文章就够了/</id>
    <published>2020-06-07T00:51:00.000Z</published>
    <updated>2020-06-07T00:52:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家简单聊一聊Spring Bean的scope是什么</p><p>在Bean.xml配置文件中，对每一个Bean中Scope属性的修改控制着Bean对象被创建的方式，或者说时机。</p><p>在Spring中，常见的Scope有以下几种：</p><p>Singleton(单例模式 - 一夫多妻)：在Spring中，默认使用的是单例模式，也就是Singleton，整个application中某一个class只有一个实例被创建，全局共享一个实例的状态，属于stateless，无状态的bean。这类bean只有在Spring初始化启动的时候被创建，并且放入到单例bean的缓存池里面，以备后面使用。而后面所有针对这个类的返回和调用，都使用的是这一个实例。</p><p>Prototype(原型 - 一夫一妻)：第二种scope类型叫做prototype，也就是原型的意思，指的是我们在bean.xml配置文件中所配置好的某个类的bean只是作为一个原型，在Spring初始化启动的时候并不会被创建，更不会被放入bean的缓存池。而是在用ApplicationContext.getBean()或者其他调用这个bean类的时候被创建一个新的实例且返回。这样的方式称为stateful bean，指的是每一个实例都拥有自己独立的bean的状态，一次实例化对应一个新的bean object，名副其实的一夫一妻。</p><p>Request(请求 - 一约一次)：第三种scope类型叫做Request，请求类型。顾名思义，这类bean的在收到一个request请求的时候被创建，并且存活于整个请求过程，在请求结束的时候被销毁。也就是约一次，给一次。所以每个user的bean的状态也都是不一样的，自然而然也属于stateful的bean。而此scope只存在于web-aware ApplicationContext中，也就是网络应用，桌面应用等是不可以使用这一类的。（当然有网才好约了！）</p><p>Session(会话 - 一约包夜)：第四种scope类型叫做session, 会话类型。这个类型跟httpSession类似。对会话session不熟悉的朋友可以出门左转去看一下。跟上面request类型相似，不过区别在于这类bean不只是存在于单个request请求，而是在创建以后整个http session都继续存活，直到session会话结束被销毁，这不就相当于是包夜了吗！一样的，要求是web-aware ApplicationContext，并且是stateful的bean。</p><p>Global-Session(全局会话 - 群约)：最后一种scope类型只适用于porlet-based web application，当多个portlet共享一个global session，全局会话的时候，此类bean可供整个session内的所有Portlet使用并且共享状态，也属于stateful的。而当会话结束的时候，则被销毁并且失效。跟上面session的区别在于，这个是多点在一个会话中共享一个单例，而session则是一点在一个会话中独占一个单例。就如同porlet的群p。</p><p>希望以上针对Spring中bean的scope的注解能够帮助到大家理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天给大家简单聊一聊Spring Bean的scope是什么&lt;/p&gt;
&lt;p&gt;在Bean.xml配置文件中，对每一个Bean中Scope属性的修改控制着Bean对象被创建的方式，或者说时机。&lt;/p&gt;
&lt;p&gt;在Spring中，常见的Scope有以下几种：&lt;/p&gt;
&lt;p&gt;Sing
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.ziyaowang.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.ziyaowang.com/tags/Spring/"/>
    
      <category term="Bean" scheme="http://www.ziyaowang.com/tags/Bean/"/>
    
      <category term="java" scheme="http://www.ziyaowang.com/tags/java/"/>
    
  </entry>
  
</feed>
